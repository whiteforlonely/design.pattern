/**
 * 抽象工厂模式
 * 1.分离了具体的类，一个工厂封装了创建对象的责任和过程，他将客户和类的实现分开，客户通过他的抽象接口
 * 操纵实例，产品的类名也在具体工厂的视线中被分离，他们不出现在客户代码中。
 *
 * 2. 它使得易于交换产品系列，一个具体工厂类在一个应用中仅出现一次，即在他初始化的时候， 这使得改变你个应用的
 * 具体工厂变得很容易，他只须改变具体的工厂 就可以改变即可使用不同的产品配置， 因为一个抽象工厂创建了一个完整的
 * 产品序列，所以整个产品系列会立刻改变，
 *
 * 3. 它有利于产品的一致性， 当一个系列中的产品对象被设计成一起工作时， 一个应用一次只能使用同一个系列中的对象。
 *
 * 4. 难以支持新种类的产品， 难以扩展抽象工厂以生产新种类的产品。 AbstractFactory已经确定了可以被创建的产品的集合。
 * 
 *
 * @author : Saturday
 * date 2021/7/16
 * @version V1.0
 */
package com.ake.designpattern.creator.demo1;